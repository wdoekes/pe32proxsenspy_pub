from unittest import TestCase

from litergauge import LiterGauge


class LiterGaugeTest(TestCase):
    def test_litergauge(self):
        inputs = (
            # At t = 0
            ("10:10:00.000", 0, 0),
            ("10:11:00.000", 0, 0),
            ("10:12:00.000", 0, 0),
            # +1
            ("10:12:20.000", 1, 0),
            ("10:12:30.000", 1, 0),
            ("10:12:40.000", 1, 0),
            ("10:12:50.000", 1, 0),
            # +2/20 secs
            ("10:13:00.000", 2, 25),
            ("10:13:20.000", 3, 50),
            ("10:13:40.000", 4, 50),
            ("10:14:00.000", 5, 50),
            # Nothing for a while
            ("10:14:30.000", 5, 50),
            ("10:15:00.000", 5, 0),
            # And then slow increase
            ("10:15:30.000", 6, 11),
            ("10:16:00.000", 6, 11),
            ("10:16:30.000", 7, 16),
            ("10:17:00.000", 7, 16),
            ("10:17:30.000", 8, 16),
            ("10:18:00.000", 8, 16),
            # Fast increase and then quick stop
            ("10:19:00.000", 8, 16),
            ("10:20:00.000", 12, 26),
            ("10:20:10.000", 16, 400),
            ("10:20:20.000", 16, 400),
            ("10:20:30.000", 16, 0),
        )
        gauge = LiterGauge()
        for tmstr, relative, flow in inputs:
            h, m, s = tmstr.split(':', 2)
            s, ms = s.split('.')
            current_ms = (
                int(h) * 1000 * 3600 +
                int(m) * 1000 * 60 +
                int(s) * 1000 +
                int(ms))
            gauge.set_liters(current_ms, relative)
            calculated_flow = gauge.get_milliliters_per_second()
            self.assertEqual(calculated_flow, flow, (
                f'got unexpected {calculated_flow} at '
                f'("{tmstr}", {relative}, {flow})'))

    def test_litergauge_live(self):
        inputs = (
            ('22:50:14.000', 244, 0),
            ('22:51:14.000', 244, 0),
            ('22:52:14.000', 244, 0),
            ('22:53:14.000', 244, 0),
            ('22:54:14.000', 244, 0),
            ('22:55:14.000', 244, 0),
            ('22:56:14.000', 244, 0),
            ('22:56:24.000', 245, 0),
            ('22:56:29.000', 246, 200),
            ('22:56:33.000', 247, 250),
            ('22:56:34.000', 247, 250),
            ('22:56:37.000', 248, 250),
            ('22:56:40.000', 249, 333),
            ('22:56:52.000', 250, 83),
            ('22:57:07.000', 251, 66),
            ('22:57:14.000', 251, 66),
            ('22:57:20.000', 252, 71),
            ('22:57:34.000', 253, 74),
            ('22:57:49.000', 254, 68),
            ('22:58:05.000', 255, 64),
            ('22:58:14.000', 255, 64),
            ('22:58:20.000', 256, 64),
            ('22:58:35.000', 257, 66),
            ('22:58:50.000', 258, 66),
            ('22:59:05.000', 259, 66),
            ('22:59:14.000', 259, 66),
            ('22:59:20.000', 260, 66),
            ('22:59:36.000', 261, 64),
            ('22:59:51.000', 262, 64),
            ('23:00:06.000', 263, 66),
            ('23:00:14.000', 263, 66),
            ('23:00:21.000', 264, 66),
            ('23:00:36.000', 265, 66),
            ('23:00:52.000', 266, 64),
            ('23:01:07.000', 267, 64),
            ('23:01:14.000', 267, 64),
            ('23:01:23.000', 268, 64),
            ('23:01:38.000', 269, 64),
            ('23:01:54.000', 270, 64),
            ('23:02:09.000', 271, 64),
            ('23:02:14.000', 271, 64),
            ('23:02:24.000', 272, 66),
            ('23:02:40.000', 273, 64),
            ('23:02:55.000', 274, 64),
            ('23:03:10.000', 275, 66),
            ('23:03:14.000', 275, 66),
            ('23:03:25.000', 276, 66),
            ('23:03:40.000', 277, 66),
            ('23:03:55.000', 278, 66),
            ('23:04:10.000', 279, 66),
            ('23:04:14.000', 279, 66),
            ('23:04:26.000', 280, 64),
            ('23:04:41.000', 281, 64),
            ('23:05:14.000', 281, 0),
            ('23:06:14.000', 281, 0),
            ('23:07:14.000', 281, 0),
            ('23:08:14.000', 281, 0),
            ('23:09:14.000', 281, 0),
        )
        gauge = LiterGauge()
        for tmstr, relative, flow in inputs:
            h, m, s = tmstr.split(':', 2)
            s, ms = s.split('.')
            current_ms = (
                int(h) * 1000 * 3600 +
                int(m) * 1000 * 60 +
                int(s) * 1000 +
                int(ms))
            gauge.set_liters(current_ms, relative)
            calculated_flow = gauge.get_milliliters_per_second()
            self.assertEqual(calculated_flow, flow, (
                f'got unexpected {calculated_flow} at '
                f'("{tmstr}", {relative}, {flow})'))
